// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// migration command : npx prisma migrate dev --name init
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  username String    @unique()
  password String
  hashedRt String?
  posts    Post[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

model Post {
  id    String @id @default(uuid())
  title String
  body  String
  slug  String @unique

  userId String

  postStats PostStats?
  comments  Comment[]
  postLikes PostLike[]
  tags      PostTags[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

model PostStats {
  id            String @id @default(uuid())
  likes         Int    @default(0)
  commentCounts Int    @default(0)

  postId String @unique

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostLike {
  id String @id @default(uuid())

  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id               String @id @default(uuid())
  text             String
  likes            Int    @default(0)
  subCommentsCount Int    @default(0)

  userId          String
  postId          String
  parentCommentId String?

  commentLikes CommentLike[]

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("ParentCommentSubComments", fields: [parentCommentId], references: [id])
  subComment    Comment[] @relation("ParentCommentSubComments")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

model CommentLike {
  id String @id @default(uuid())

  commentId String
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  posts PostTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostTags {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([postId, tagId])
}
